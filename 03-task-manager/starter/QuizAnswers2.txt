1. In this lesson, you created a middleware function called asyncWrapper. Why?
   The asyncWrapper middleware function is created to handle asynchronous operations in Express routes.
    It helps to catch errors that occur in asynchronous code and pass them to the error-handling middleware,
     ensuring that the application does not crash and that errors are properly managed.

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request 
    the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class.
     Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    return next(new CustomAPIError('Task not found', 404));  
  }  
  res.status(200).json({ task });  
});
